{"version":3,"sources":["utils/utils.js","components/Card.js","components/Footer.js","components/Header.js","components/Loader.js","hooks/useStats.js","components/Stats.js","components/CountrySelector.js","components/CountryItem.js","components/AllCountries.js","components/Tabs.js","components/Curve.js","App.js","index.js"],"names":["ISO3CountryCodes","AFG","ALB","DZA","AND","AGO","AIA","ATG","ARG","ARM","ABW","AUS","AUT","AZE","BHS","BHR","BGD","BRB","BLR","BEL","BLZ","BEN","BMU","BTN","BOL","BIH","BWA","BRA","VGB","BRN","BGR","BFA","BDI","CPV","KHM","CMR","CAN","BES","CYM","CAF","TCD","JEY","CHL","CHN","COL","COG","CRI","HRV","CUB","CUW","CYP","CZE","CIV","COD","DNK","DJI","DMA","DOM","ECU","EGY","SLV","GNQ","ERI","EST","ETH","FLK","FRO","FJI","FIN","FRA","GUF","PYF","GAB","GMB","GEO","DEU","GHA","GIB","GRC","GRL","GRD","GLP","GTM","GIN","GNB","GUY","HTI","VAT","HND","HKG","HUN","ISL","IND","IDN","IRN","IRQ","IRL","IMN","ISR","ITA","JAM","JPN","JOR","KAZ","KEN","KWT","KGZ","LAO","LVA","LBN","LBR","LBY","LIE","LTU","LUX","MAC","MKD","MDG","MWI","MYS","MDV","MLI","MLT","MTQ","MRT","MUS","MYT","MEX","MDA","MCO","MNG","MNE","MSR","MAR","MOZ","MMR","NAM","NPL","NLD","NCL","NZL","NIC","NER","NGA","NOR","OMN","PAK","PSE","PAN","PNG","PRY","PER","PHL","POL","PRT","QAT","ROU","RUS","RWA","REU","KOR","KNA","LCA","MAF","SPM","VCT","SMR","STP","SAU","SEN","SRB","SYC","SLE","SGP","SXM","SVK","SVN","SOM","ZAF","SSD","ESP","LKA","BLM","SDN","SUR","SWZ","SWE","CHE","SYR","TWN","TZA","THA","TLS","TGO","TTO","TUN","TUR","TCA","ARE","GBR","USA","UGA","UKR","URY","UZB","VEN","VNM","ESH","YEM","ZMB","ZWE","COLORS","global","active","recover","death","ICONS","today","getStyle","variant","color","dark","borderColor","Card","title","count","total","percent","toFixed","className","style","src","process","alt","width","toLocaleString","Footer","href","target","Header","Loader","useStats","url","useState","stats","setStats","loading","setLoading","error","setError","useEffect","a","fetch","then","res","json","catch","err","data","fetchData","React","memo","labels","datasets","backgroundColor","recovered","deaths","cases","todayCases","todayDeaths","options","display","text","fontSize","legend","responsive","maintainAspectRatio","CountrySelector","CountItem","type","AllCountries","map","country","key","Tabs","Curve","selectedCountryCode","chartData","chartArr","Object","keys","tempObj","dates","push","height","margin","top","right","left","bottom","strokeDasharray","dataKey","dot","stroke","activeDot","r","App","setSelectedCountryCode","countries","entries","code","value","label","isClearable","onChange","e","ReactGA","event","category","action","initialize","pageview","window","location","pathname","search","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5a58ec2.chunk.js","sourcesContent":["/**\n * List of countries with ISO3 code\n */\nexport const ISO3CountryCodes =   {\n  AFG: \"Afghanistan\",\n  ALB: \"Albania\",\n  DZA: \"Algeria\",\n  AND: \"Andorra\",\n  AGO: \"Angola\",\n  AIA: \"Anguilla\",\n  ATG: \"Antigua and Barbuda\",\n  ARG: \"Argentina\",\n  ARM: \"Armenia\",\n  ABW: \"Aruba\",\n  AUS: \"Australia\",\n  AUT: \"Austria\",\n  AZE: \"Azerbaijan\",\n  BHS: \"Bahamas\",\n  BHR: \"Bahrain\",\n  BGD: \"Bangladesh\",\n  BRB: \"Barbados\",\n  BLR: \"Belarus\",\n  BEL: \"Belgium\",\n  BLZ: \"Belize\",\n  BEN: \"Benin\",\n  BMU: \"Bermuda\",\n  BTN: \"Bhutan\",\n  BOL: \"Bolivia\",\n  BIH: \"Bosnia\",\n  BWA: \"Botswana\",\n  BRA: \"Brazil\",\n  VGB: \"British Virgin Islands\",\n  BRN: \"Brunei\",\n  BGR: \"Bulgaria\",\n  BFA: \"Burkina Faso\",\n  BDI: \"Burundi\",\n  CPV: \"Cabo Verde\",\n  KHM: \"Cambodia\",\n  CMR: \"Cameroon\",\n  CAN: \"Canada\",\n  BES: \"Caribbean Netherlands\",\n  CYM: \"Cayman Islands\",\n  CAF: \"Central African Republic\",\n  TCD: \"Chad\",\n  JEY: \"Channel Islands\",\n  CHL: \"Chile\",\n  CHN: \"China\",\n  COL: \"Colombia\",\n  COG: \"Congo\",\n  CRI: \"Costa Rica\",\n  HRV: \"Croatia\",\n  CUB: \"Cuba\",\n  CUW: \"Curaçao\",\n  CYP: \"Cyprus\",\n  CZE: \"Czechia\",\n  CIV: \"Côte d'Ivoire\",\n  COD: \"DRC\",\n  DNK: \"Denmark\",\n  DJI: \"Djibouti\",\n  DMA: \"Dominica\",\n  DOM: \"Dominican Republic\",\n  ECU: \"Ecuador\",\n  EGY: \"Egypt\",\n  SLV: \"El Salvador\",\n  GNQ: \"Equatorial Guinea\",\n  ERI: \"Eritrea\",\n  EST: \"Estonia\",\n  ETH: \"Ethiopia\",\n  FLK: \"Falkland Islands (Malvinas)\",\n  FRO: \"Faroe Islands\",\n  FJI: \"Fiji\",\n  FIN: \"Finland\",\n  FRA: \"France\",\n  GUF: \"French Guiana\",\n  PYF: \"French Polynesia\",\n  GAB: \"Gabon\",\n  GMB: \"Gambia\",\n  GEO: \"Georgia\",\n  DEU: \"Germany\",\n  GHA: \"Ghana\",\n  GIB: \"Gibraltar\",\n  GRC: \"Greece\",\n  GRL: \"Greenland\",\n  GRD: \"Grenada\",\n  GLP: \"Guadeloupe\",\n  GTM: \"Guatemala\",\n  GIN: \"Guinea\",\n  GNB: \"Guinea-Bissau\",\n  GUY: \"Guyana\",\n  HTI: \"Haiti\",\n  VAT: \"Holy See (Vatican City State)\",\n  HND: \"Honduras\",\n  HKG: \"Hong Kong\",\n  HUN: \"Hungary\",\n  ISL: \"Iceland\",\n  IND: \"India\",\n  IDN: \"Indonesia\",\n  IRN: \"Iran\",\n  IRQ: \"Iraq\",\n  IRL: \"Ireland\",\n  IMN: \"Isle of Man\",\n  ISR: \"Israel\",\n  ITA: \"Italy\",\n  JAM: \"Jamaica\",\n  JPN: \"Japan\",\n  JOR: \"Jordan\",\n  KAZ: \"Kazakhstan\",\n  KEN: \"Kenya\",\n  KWT: \"Kuwait\",\n  KGZ: \"Kyrgyzstan\",\n  LAO: \"Lao People's Democratic Republic\",\n  LVA: \"Latvia\",\n  LBN: \"Lebanon\",\n  LBR: \"Liberia\",\n  LBY: \"Libyan Arab Jamahiriya\",\n  LIE: \"Liechtenstein\",\n  LTU: \"Lithuania\",\n  LUX: \"Luxembourg\",\n  MAC: \"Macao\",\n  MKD: \"Macedonia\",\n  MDG: \"Madagascar\",\n  MWI: \"Malawi\",\n  MYS: \"Malaysia\",\n  MDV: \"Maldives\",\n  MLI: \"Mali\",\n  MLT: \"Malta\",\n  MTQ: \"Martinique\",\n  MRT: \"Mauritania\",\n  MUS: \"Mauritius\",\n  MYT: \"Mayotte\",\n  MEX: \"Mexico\",\n  MDA: \"Moldova\",\n  MCO: \"Monaco\",\n  MNG: \"Mongolia\",\n  MNE: \"Montenegro\",\n  MSR: \"Montserrat\",\n  MAR: \"Morocco\",\n  MOZ: \"Mozambique\",\n  MMR: \"Myanmar\",\n  NAM: \"Namibia\",\n  NPL: \"Nepal\",\n  NLD: \"Netherlands\",\n  NCL: \"New Caledonia\",\n  NZL: \"New Zealand\",\n  NIC: \"Nicaragua\",\n  NER: \"Niger\",\n  NGA: \"Nigeria\",\n  NOR: \"Norway\",\n  OMN: \"Oman\",\n  PAK: \"Pakistan\",\n  PSE: \"Palestine\",\n  PAN: \"Panama\",\n  PNG: \"Papua New Guinea\",\n  PRY: \"Paraguay\",\n  PER: \"Peru\",\n  PHL: \"Philippines\",\n  POL: \"Poland\",\n  PRT: \"Portugal\",\n  QAT: \"Qatar\",\n  ROU: \"Romania\",\n  RUS: \"Russia\",\n  RWA: \"Rwanda\",\n  REU: \"Réunion\",\n  KOR: \"S. Korea\",\n  KNA: \"Saint Kitts and Nevis\",\n  LCA: \"Saint Lucia\",\n  MAF: \"Saint Martin\",\n  SPM: \"Saint Pierre Miquelon\",\n  VCT: \"Saint Vincent and the Grenadines\",\n  SMR: \"San Marino\",\n  STP: \"Sao Tome and Principe\",\n  SAU: \"Saudi Arabia\",\n  SEN: \"Senegal\",\n  SRB: \"Serbia\",\n  SYC: \"Seychelles\",\n  SLE: \"Sierra Leone\",\n  SGP: \"Singapore\",\n  SXM: \"Sint Maarten\",\n  SVK: \"Slovakia\",\n  SVN: \"Slovenia\",\n  SOM: \"Somalia\",\n  ZAF: \"South Africa\",\n  SSD: \"South Sudan\",\n  ESP: \"Spain\",\n  LKA: \"Sri Lanka\",\n  BLM: \"St. Barth\",\n  SDN: \"Sudan\",\n  SUR: \"Suriname\",\n  SWZ: \"Swaziland\",\n  SWE: \"Sweden\",\n  CHE: \"Switzerland\",\n  SYR: \"Syrian Arab Republic\",\n  TWN: \"Taiwan\",\n  TZA: \"Tanzania\",\n  THA: \"Thailand\",\n  TLS: \"Timor-Leste\",\n  TGO: \"Togo\",\n  TTO: \"Trinidad and Tobago\",\n  TUN: \"Tunisia\",\n  TUR: \"Turkey\",\n  TCA: \"Turks and Caicos Islands\",\n  ARE: \"UAE\",\n  GBR: \"UK\",\n  USA: \"USA\",\n  UGA: \"Uganda\",\n  UKR: \"Ukraine\",\n  URY: \"Uruguay\",\n  UZB: \"Uzbekistan\",\n  VEN: \"Venezuela\",\n  VNM: \"Vietnam\",\n  ESH: \"Western Sahara\",\n  YEM: \"Yemen\",\n  ZMB: \"Zambia\",\n  ZWE: \"Zimbabwe\"\n}\n/**\n * Returns new array by combining proviences data for countries\n *\n * @param {Array} data\n * @param {Array}\n */\nexport const combineCountryData = (data = []) => {\n  const countries = {};\n  const worldwide = {\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n    active: 0,\n    lastUpdate: 0\n  };\n\n  data.forEach(\n    ({\n      countryRegion: country,\n      lastUpdate,\n      confirmed,\n      recovered,\n      deaths,\n      active,\n      iso3\n    }) => {\n      worldwide.confirmed += confirmed;\n      worldwide.recovered += recovered;\n      worldwide.deaths += deaths;\n      worldwide.active += active;\n\n      if (worldwide.lastUpdate < lastUpdate) {\n        worldwide.lastUpdate = lastUpdate;\n      }\n\n      if (countries[country]) {\n        countries[country].confirmed += confirmed;\n        countries[country].recovered += recovered;\n        countries[country].deaths += deaths;\n        countries[country].active += active;\n      } else {\n        countries[country] = {\n          country,\n          lastUpdate,\n          confirmed,\n          recovered,\n          deaths,\n          active,\n          iso3\n        };\n      }\n    }\n  );\n\n  return {\n    worldwide,\n    countriesData: Object.keys(countries).map(country => countries[country])\n  };\n};\n\nexport const sortOptions = {\n  Confirmed: 'confirmed',\n  Recovered: 'recovered',\n  Deaths: 'deaths'\n};\n","import React from 'react';\nimport '../styles/card.css';\n\nconst COLORS = {\n  global: '#fb542b',\n  active: '#3F51B5',\n  recover: '#32970a',\n  death: '#d2173b',\n};\n\nconst ICONS = {\n  global: '/1.png',\n  recover: '/2.png',\n  active : '/3.png',\n  death: '/4.png',\n  today:'/5.png',\n};\n\nconst getStyle = variant => {\n  return variant\n    ? {\n        color: COLORS[variant] || COLORS.dark,\n        borderColor:COLORS[variant] || COLORS.dark,\n      }\n    : {};\n};\n\nfunction Card({ title, count, total, variant }) {\n  const percent = total ? ((count / total) * 100).toFixed(2) : 0;\n\n  return (\n    <div className=\"card\" style={getStyle(variant)}>\n      <h3 className=\"card-title\">{title}</h3>\n      <img src={process.env.PUBLIC_URL + ICONS[variant]} alt=\"covid\" width=\"30\" />\n      <div className=\"card-info\">\n        <h2 className=\"count\">{count.toLocaleString()}</h2>\n        {percent !== '100.00' && <h4 className=\"count\">{`${percent}%`}</h4>}\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer>\n      <br />\n      <h6>\n        Data Source: \n        <a href=\"https://corona.lmao.ninja/\" target=\"BLANk\">\n        https://corona.lmao.ninja/\n        </a>\n      </h6>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction Header() {\n  return (\n    <header>\n      <div>\n        <h3>COVID-19 Tracker</h3>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Loader() {\n  return <div className=\"spinner\"></div>;\n}\nexport default Loader;\n","import { useState, useEffect } from 'react';\n\nfunction useStats(url) {\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError();\n      const data = await fetch(url)\n        .then(res => res.json())\n        .catch(err => {\n          setError(err || 'Failed to load data!');\n        });\n      data ? setStats(data) : setError('Failed to load data!');\n      setLoading(false);\n    }\n    fetchData();\n  }, [url]);\n\n  return {\n    stats,\n    loading,\n    error\n  };\n}\n\nexport default useStats;\n","import React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Card from \"./Card\";\nimport Loader from \"./Loader\";\nimport useStats from \"../hooks/useStats\";\n\nimport \"../styles/stats.css\";\n\nfunction Stats({ url }) {\n  const { stats, error, loading } = useStats(url);\n  const data = {\n    labels: [],\n    datasets: [\n      {\n        data: [],\n        backgroundColor: [\"#3F51B5\", \"#32970a\", \"#d2173b\"]\n      },\n    ],\n  };\n  if (stats) {\n    data.labels = [\"Active\", \"Recovered\", \"Deaths\"];\n    data.datasets[0].data = [stats.active, stats.recovered, stats.deaths];\n  }\n\n  return (\n    <div className=\"container\">\n      {error ? (\n        <h4 className=\"error\">Looks like there is a problem...</h4>\n      ) : null}\n      {loading ? <Loader /> : null}\n      {stats && !loading && !error ? (\n        <>\n          <div className=\"card-container\">\n            <Card\n              title=\"Total cases\"\n              count={stats.error ? 0 : stats.cases}\n              total={stats.error ? 0 : stats.cases}\n              variant=\"global\"\n            />\n            <Card\n              title=\"Active cases\"\n              count={stats.error ? 0 : stats.active}\n              total={stats.error ? 0 : stats.cases}\n              variant=\"active\"\n            />\n            <Card\n              title=\"Recovered\"\n              count={stats.error ? 0 : stats.recovered}\n              total={stats.error ? 0 : stats.cases}\n              variant=\"recover\"\n            />\n            <Card\n              title=\"Deaths\"\n              count={stats.error ? 0 : stats.deaths}\n              total={stats.error ? 0 : stats.cases}\n              variant=\"death\"\n            />\n            <Card\n              title=\"Today cases\"\n              count={stats.error ? 0 : stats.todayCases}\n              total={stats.error ? 0 : stats.cases}\n              variant=\"today\"\n            />\n            <Card\n              title=\"Today deaths\"\n              count={stats.error ? 0 : stats.todayDeaths}\n              total={stats.error ? 0 : stats.cases}\n              variant=\"today\"\n            />\n          </div>\n          <div className=\"graph\">\n            <Doughnut\n              data={data}\n              options={{\n                title: {\n                  display: true,\n                  text: \"Cases distribution\",\n                  fontSize: 20,\n                },\n                legend: {\n                  display: true,\n                },\n                responsive: true,\n                maintainAspectRatio: true,\n              }}\n            />\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default React.memo(Stats);\n","import React, { useState } from 'react';\n\nimport Stats from './Stats';\nimport { ISO3CountryCodes } from '../utils/utils';\n\nfunction CountrySelector() {\n  const [selectedCountryCode, setSelectedCountryCode] = useState('IND');\n\n  return (\n    <>\n      <div className=\"selector\">\n        <label htmlFor=\"country\">Select Country:</label>\n        <select\n          id=\"country\"\n          className=\"select\"\n          onChange={(e) => {\n            setSelectedCountryCode(e.target.value);\n          }}\n          defaultValue={selectedCountryCode}\n        >\n          <option value=\"\">Select Country</option>\n          {Object.entries(ISO3CountryCodes).map(([code, country]) => (\n            <option\n              // defaultValue={selectedCountryCode}\n              key={code}\n              value={code}\n            >\n              {country}\n            </option>\n          ))}\n        </select>\n      </div>\n      {selectedCountryCode ? (\n        <Stats\n          title={ISO3CountryCodes[selectedCountryCode]}\n          url={`https://covid19.mathdro.id/api/countries/${selectedCountryCode}`}\n        ></Stats>\n      ) : null}\n    </>\n  );\n}\n\nexport default CountrySelector;\n","import React from 'react';\n\nconst CountItem = React.memo(({ count = 0, type }) => {\n  return (\n    <div>\n      <h5 className={`color-${type}`}>{count.toLocaleString()}</h5>\n      <p>{type}</p>\n    </div>\n  );\n});\n\nfunction CountryItem({ title, count: { cases, active, recovered, deaths } }) {\n  return (\n    <div className=\"list-item\">\n      <div className=\"title\">\n        <h5>{title}</h5>\n      </div>\n      <div className=\"count\">\n        <CountItem count={cases} type=\"total\" />\n        <CountItem count={active} type=\"active\" />\n        <CountItem count={recovered} type=\"recovered\" />\n        <CountItem count={deaths} type=\"deaths\" />\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(CountryItem);\n","/* eslint-disable no-unreachable */\nimport React from 'react';\nimport useStats from '../hooks/useStats';\nimport CountryItem from './CountryItem';\nimport Loader from './Loader';\nimport '../styles/list.css';\n\nfunction AllCountries() {\n  const { stats, loading, error } = useStats(\n    'https://corona.lmao.ninja/v2/countries?sort=cases'\n  );\n  // let ISO3CountryCodes = {}\n  // stats && stats.map(country => {\n  //   if(country.countryInfo.iso3) {\n  //     ISO3CountryCodes[country.countryInfo.iso3] = country.country\n  //   }else {\n  //     console.log(country)\n  //   }\n  //   return country\n  // })\n  // console.log(ISO3CountryCodes)\n\n  return (\n    <div className=\"stats-container\">\n      {error ? (\n        <h4 className=\"error\">Looks like there is a problem...</h4>\n      ) : null}\n      {loading ? <Loader /> : null}\n      {stats && !loading && !error ? (\n        <>\n          <h2>All countries</h2>\n          {stats.map(\n            ({\n              cases,\n              active,\n              country,\n              recovered,\n              deaths\n            }) => (\n              <CountryItem\n                title={country}\n                count={{ cases, active, recovered, deaths }}\n                key={country}\n              />\n            )\n          )}\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default AllCountries;\n","import React, { useState } from 'react';\n\nimport '../styles/tab.css';\n\nfunction Tab({ name, handleClick, selected }) {\n  const classNames = selected\n    ? 'tab-header-item tab-selected'\n    : 'tab-header-item';\n\n  return (\n    <button onClick={handleClick} className={classNames}>\n      {name}\n    </button>\n  );\n}\n\nfunction TabHeder({ selectedIndex, handleClick, tabs }) {\n  return (\n    <div className=\"tab-header\">\n      {tabs.map(({ name }, index) => (\n        <Tab\n          name={name}\n          key={name}\n          selected={index === selectedIndex}\n          handleClick={() => {\n            handleClick(index);\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\nfunction Tabs({ tabs }) {\n  const [selectedTab, setSelectedTab] = useState(0);\n\n  return (\n    <>\n      <TabHeder\n        tabs={tabs.map(({ name }) => ({ name }))}\n        handleClick={setSelectedTab}\n        selectedIndex={selectedTab}\n      />\n      {tabs[selectedTab].component}\n    </>\n  );\n}\n\nexport default Tabs;\n","/* eslint-disable no-unreachable */\nimport React from \"react\";\nimport useStats from \"../hooks/useStats\";\nimport Loader from \"./Loader\";\nimport \"../styles/curve.css\";\nimport {\n  LineChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line,\n  ResponsiveContainer,\n} from \"recharts\";\n\nfunction Curve({ url, selectedCountryCode }) {\n  const { stats, loading, error } = useStats(url);\n  let chartData = [];\n  let chartArr = [];\n  if (stats) {\n    chartData = selectedCountryCode ? stats[\"timeline\"] : stats;\n    chartData &&\n      chartData[\"cases\"] &&\n      Object.keys(chartData[\"cases\"]).map((key) => {\n        let tempObj = {};\n        tempObj.dates = key;\n        tempObj.cases = chartData[\"cases\"][key];\n        tempObj.recovered = chartData[\"recovered\"][key];\n        tempObj.deaths = chartData[\"deaths\"][key];\n        chartArr.push(tempObj);\n        return chartArr;\n      });\n  }\n  //   console.log(chartArr);\n  return (\n    <div className=\"curve-container\">\n      {error ? (\n        <h4 className=\"error\">Looks like there is a problem...</h4>\n      ) : null}\n      {loading ? <Loader /> : null}\n      {chartData && !loading && !error ? (\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <LineChart\n            data={chartArr}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"dates\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line dot={false} dataKey=\"cases\" stroke=\"#fb542b\" />\n            <Line\n              dot={false}\n              dataKey=\"recovered\"\n              stroke=\"#32970a\"\n              activeDot={{ r: 8 }}\n            />\n            <Line\n              dot={false}\n              dataKey=\"deaths\"\n              stroke=\"#d2173b\"\n              activeDot={{ r: 8 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      ) : null}\n    </div>\n  );\n}\n\nexport default Curve;\n","import React, { useState } from \"react\";\nimport ReactGA from \"react-ga\";\nimport Select from \"react-select\";\nimport { ISO3CountryCodes } from \"./utils/utils\";\nimport { Stats, Header, Footer, AllCountries, Curve } from \"./components\";\nimport \"./App.css\";\n\nfunction App() {\n  const [selectedCountryCode, setSelectedCountryCode] = useState(\"\");\n  let countries = [];\n  Object.entries(ISO3CountryCodes).map(([code, country]) =>\n    countries.push({ value: code, label: country })\n  );\n  return (\n    <>\n      <Header />\n      <div className=\"menu\">\n        <ul className=\"menu-ul\">\n          <li>\n            {selectedCountryCode\n              ? ISO3CountryCodes[selectedCountryCode]\n              : \"Global\"}\n          </li>\n        </ul>\n      </div>\n      <div className=\"stats-section\">\n        <Select\n          options={countries}\n          label=\"Select country\"\n          className=\"select-css\"\n          isClearable\n          onChange={(e) => {\n            ReactGA.event({\n              category: \"Selected country\",\n              action: e && e.value ? ISO3CountryCodes[e.value] : 'Global',\n            });\n            e && e.value ? setSelectedCountryCode(e.value):setSelectedCountryCode('');\n          }}\n        />\n      </div>\n      <div className=\"stats-cards\">\n        {selectedCountryCode ? (\n          <Stats\n            url={`https://corona.lmao.ninja/v2/countries/${selectedCountryCode}`}\n          ></Stats>\n        ) : (\n          <Stats url={`https://corona.lmao.ninja/v2/all`}></Stats>\n        )}\n      </div>\n      <br />\n      {selectedCountryCode ? (\n          <Curve\n            url={`https://corona.lmao.ninja/v2/historical/${selectedCountryCode}?lastdays=60`}\n            selectedCountryCode={selectedCountryCode}\n          ></Curve>\n        ) : (\n          <Curve url={`https://corona.lmao.ninja/v2/historical/all?lastdays=60`}></Curve>\n        )}\n      <br />\n      <AllCountries />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ReactGA from \"react-ga\";\nconst trackingId = \"UA-164329346-1\";\n// ReactGA.initialize(trackingId);\nReactGA.initialize(trackingId)\nReactGA.pageview(window.location.pathname + window.location.search);\nReactDOM.render(<App />, document.getElementById('root'));\n\n "],"sourceRoot":""}